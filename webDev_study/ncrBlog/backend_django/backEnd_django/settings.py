"""
Django settings for backEnd_django project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'a-^wz!da5a(-g3%vr)a8wc&w1m1+*zbo_()5!mvifa+e%zfomd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']  # 允许所有人登录

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 第三方的
    'rest_framework',
    # 自己的
    'api',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backEnd_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backEnd_django.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '10.195.106.43',
        'PORT': '3306',
        'USER': 'ncrBlog',
        'PASSWORD': 'protoss',
        'NAME': 'ncrBlog',
        # 避免映射数据库时出现警告
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
# 语言配置
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# 用户自定义日志配置 失败

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,  # 是否禁用已存在的日志器
#     'formatters': {
#         # 日志格式
#         'verbose': {
#             'format': '%(levelname) %(asctime)s %(module)s %(lineno)d %(message)s'
#         },
#         'simple': {  # 简单格式
#             'format': '%(levelname) %(module)s %(lineno)d %(message)s'
#         },
#     },
#     # 过滤
#     'filters': {
#         'required_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue'
#         }
#     },
#     # 定义具体处理日志的方式
#     'handlers': {
#         # 控制台输出
#         'console': {
#             'level': 'INFO',
#             'filters': ['require_debug_true'],  # 只有在 DEBUG 为 True 时才在屏幕打印日志
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple'
#         },
#         # 输出info日志
#         'file': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/blog.log'),
#             'maxBytes': 300 * 1024 * 1024,
#             'backupCount': 10,
#             'formatter': 'verbose',
#             'encoding': 'utf-8',  # 设置默认编码
#         },
#     },
#     # 配置用哪几种 handlers 来处理日志
#     'loggers': {
#         # 类型 为 django 处理所有类型的日志， 默认调用
#         'django': {
#             'handlers': ['console', 'file'],
#             'level': 'INFO',  #日志接受最低级别
#             'propagate': True
#         },
#     }
# }
# REST_FRAMEWORK 自定义设置
REST_FRAMEWORK = {
    # 自定以分页显示 每页10行
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}
